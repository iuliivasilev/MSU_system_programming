____Краткое описание____
******
Напишите сервер сообщений для поддержки одновременного разговора нескольких участников (программ-клиентов). 
При запуске клиента указывается имя компьютера и номер порта для подсоединения к серверу. 
Кроме этого указывается имя, которым пользователь будет представлен другим участникам разговора. 
При подключении проверяется уникальность заданного имени. 
Клиент ожидает ввода сообщений со стандартного потока ввода и одновременно ожидает поступления сообщения от сервера. 
При поступлении сообщения от сервера оно печатается на стандартный поток вывода, при вводе сообщения с клавиатуры оно пересылается на сервер. 
При запуске сервера указывается номер порта, на котором сервер будет ожидать подключения клиентов. 
Когда сервер получает очередное сообщение от какого-либо клиента, он добавляет к сообщению имя отправителя и рассылает сообщение всем клиентам, включая отправителя.
Для организации взаимодействия процессов необходимо использовать сокеты коммуникационного домена PF_INET с установлением соединения (SOCK_STREAM).
******
____Полное описание____
          Задание 1: Многопользовательский чат

Выдача задания                    : 12.02.2008 10:00:00
Крайний срок присылки задания     : 26.02.2008 00:00:00
Сдача задания в МЗ, доработка     : 26.02, 04.03, ... (по вторникам, 08:45)

Присылка задания (на psut@mail.ru) в срок и очная сдача в МЗ обязательны.

Наибольший балл получают те, кто в срок пришлёт хорошую версию, и в МЗ
не получит серьёзных замечаний.  Иначе, оценка за задание определяется
скоростью реакции на замечания.  Держите связь.

Необходимо написать программу-сервер, реализующую многопользовательский
текстовый чат.

Чат (chat) -- это совместная активность нескольких удаленных пользователей
на выделенном (программном) сервере, заключающаяся в групповом обмене
текстовыми сообщениями. Каждый пользователь, подключенный посредством
TCP/IP к серверу, может послать личное (приватное) сообщение
любому другому подключенному пользователю того же сервера. Кроме того,
пользователь может быть подключен к одному или нескольким каналам
(комнатам) на сервере. Сообщения, которые пользователь пишет в канал,
немедленно рассылаются всем пользователям, также подключенным к этому
каналу, причем отображается также и отправитель сообщения.

  Вариант А (базовый) 
  -------------------

* Поддерживается один канал (комната для разговоров). Все пользователи,
  подключающиеся к чату, автоматически попадают в него,  других каналов нет.

* Пользователь взаимодействует с сервером через программу-клиент,
  которая  обменивается сообщениями с сервером.  Сообщение представляется
  строкой.  В качестве клиентской программы может выступать стандартный
  TCP-клиент telnet.  В расширенном варианте можно также реализовать
  программу-клиент, предоставляющую дополнительные удобства для работы
  (вплоть до графического интерфейса), однако все возможности сервера
  должны быть доступны и с помощью telnet.

  Сообщения, отправляемые программой-клиентом, бывают двух типов:

    --  команда  (см. далее про команды) 
    --  сообщение (реплика) чата

  Сообщения, посылаемые программой-сервером, подразделяются на следующие
  типы:

    --  сообщение чата (текущего канала) 
    --  приватное сообщение (начинается с *)
    --  оповещение о событии на канале  (начинается с ***;
        например: пришел или ушел пользователь)
    --  служебное сообщение (начинается с ###;
        например: завершение работы сервера)
 
  Клиент может завершать свои строки любой из комбинаций: \n, \r, \n\r, \r\n
  (сервер поддерживает разные типы клиентских программ).  Сервер
  может завершать свои строки только символом \n.  Сервер  начинает
  обработку  сообщения от клиента, когда получит символ(ы) конца
  строки. До этого момента сообщение (строка) накапливается во временном
  буфере. Максимальная длина одной строки, получаемой сервером, фиксирована:
  255 байт.  Если длина строки превышает этот предел, сервер игнорирует
  ее и отправляет клиенту сообщение, позволяющее осознать и исправить
  свою ошибку.  Перед обработкой строки сервером начальные и завершающие
  пробельные символы (пробел, табуляция) игнорируются (т.е., строка "    hi ppl
  " будет обработана в точности также, как "hi ppl")

* Каждый пользователь на сервере идентифицируется именем (идентификатором),
  состоящим из символов (буквы, цифры, подчеркивание).  При  подключении
  пользователю присваивается идентификатор вида guest_N, где N --  номер гостя,
  увеличивающийся с каждым новым подключением.

* Строки-команды начинаются с символа / и имеют следующий вид:

    /<команда> <параметр> ... <параметр>

* В любой момент клиент может дать команду

    /help

  без параметров и получить справку о версии сервера и списке поддерживаемых
  команд с их параметрами. На русском или английском языке.

* Пользователь может сменить свое имя командой:

    /nick <новое_имя>

  Если такой пользователь уже есть, должно выдаваться сообщение об ошибке
  тому, кто пытается занять это имя. Можно выдавать сообщение и тому клиенту,
  чьё имя пытаются занять, с указанием IP-адреса второго клиента ;)

* Строка, не являющаяся командой, считается сообщением на канале и
  отображается у всех подключенных к каналу пользователей следующим образом:

    <<имя_пользователя>> <сообщение>

  Например, если пользователь, зарегистрированный под именем vasya1955,
  прислал сообщение "превед народ", всем клиентам, кроме него, разошлется:

    <vasya1955>превед народ

* Команда /whisper позволяет отправить сообщение не в канал, а приватно
  какому-либо пользователю:

    /whisper <адресат> <сообщение>

  Например, пользователь vasya1955 может написать:

    /whisper ivanko1980 превед детко, нет ли вареза?

  Если пользователя-адресата на сервере нет, то выдается сообщение об
  ошибке, иначе у клиента под именем ivanko1980 появится сообщение среди прочих,
  например:

    .....  
    <warezbot>кочайте свисту у меня, мегапак 
    <guest_3>это как? объясните. это законно? я слышал садют.  
    * <vasya1955> превед детко, не ли вареза?

* Команда

    /users

  должна выдавать список имен подключенных пользователей

* Команда

    /leave [<прощальное сообщение>]

  отключает пользователя от сервера. Необязательный аргумент -- прощальное
  сообщение -- отображается в оповещении об уходе (см. ниже)

* Когда на канале происходит какое-либо событие (пользователь приходит,
  уходит, меняет имя), сервер  оповещает о нем всех пользователей, например:

    *** vasya_pupkin entered 
    *** pupka_vasin leaved: They found me 8( 
    *** sergey is now known as sergey_rju_nimagu

* Когда сервер завершает свою работу, он должен прежде попрощаться со
  всеми клиентами:

    ### server is shutting down, thanks to everyone.


  Вариант Б (расширенный) 
  -----------------------

Для получения более высокой оценки рекомендуется реализовать
дополнительно следующие возможности:

* Поддержка нескольких каналов. Тогда пользователь, прежде чем начать
  писать сообщение в канал, должен дать команду:

    /room <название_канала>

  и подключиться к каналу, если он есть.  Если пользователь на этом
  канале заблокирован, выдается сообщение, содержащие причину блокировки
  (см. далее). Если канала нет, то таковой создается, и пользователь становится
  его создателем, а также оператором (см. далее). Если пользователь не
  подключен ни к одному каналу (сидит в прихожей), то он может только давать
  команды.

* Можно узнать список каналов, их темы (см. далее)
  и количество пользователей командой

    /rooms

* Можно получить список пользователей на канале командой

    /users [<канал>]

  т.е., появляется необязательный параметр у команды /users из варианта А.
  Из таблички должно быть видно, является ли пользователь на этом канале
  создателем или оператором.

* создатель канала может выполнять на нем команды

    /op <пользователь> 
    /deop <пользователь> 
    /rmroom <оповещение>

  соответственно для наделения и снятия полномочий оператора с пользователей
  (необязательно присутствующих на канале -- можно заочно, тогда они получат
  права, когда зайдут), для удалении канала (всем рассылается оповещение
  и канал исчезает).  Cоздатель канала является на нём оператором.

* Оператор канала может выполнять операции

    /kick <пользователь> 
    /ban <пользователь> <причина> 
    /unban <пользователь> <пожелание>

  для того, чтобы  однократно отключить пользователя от канала, блокировать
  (с указанием причины) и разблокировать (с пожеланием, допустим, больше
  не материться) доступ к нему.

* Оператор канала может менять тему канала командой

    /topic <тема>

  тема канала отображается в списке /rooms, а также при входе на канал.

* Пользователь может закрепить за собой имя, защитив его паролем. Для этого
  он выдает команду:

    /passwd <пароль>

  Если его имя имеет вид guest_N, то выдается сообщение об ошибке (нужно вначале
  выбрать постоянное имя).

* Команда /nick приобретает вид:

    /nick <имя> [<пароль>]

  Если имя новое, то пароль указывать необязательно. Если имя новое, и
  указан пароль, то это эквивалентно двум командам:

    /nick <имя> /passwd <пароль>

  Если второй по счету клиент пытается занять то же имя, пользуясь верным
  паролем, ему это не удается (you are already logged in),
  и выдается сообщение первому клиенту (you'd better change your silly passwd)

* Поддержка так называемых отложенных (offline) сообщений. Если адресатом в команде /whisper
  указан пользователь, зарегистрированный на сервере, но не подключенный
  в данный момент, то сообщение кладется в очередь (не более 10 для одного
  получателя), а отправителю посылается объяснение (user is offline right
  now, your message will be delivered upon his/her connection). 
  Соответственно, при подключении адресата ему первым делом доставляются
  личные сообщения из очереди. В этом случае адресат должен видеть, 
  когда они были отправлены (абсолютное время или относительное: 
  "5 hours 45 minutes 3 seconds ago")

* Поддержка перезагрузки сервера. Сервер должен завершать и начинать свою
  работу так, чтобы между запусками сервера сохранялись:

    --  имена, пароли и статусы (создатель, оператор) всех пользователей 
    --  каналы, их темы, списки заблокированных пользователей с причинами.
    --  отложенные сообщения (если реализованы)

  Нужно придумать формат файла, читать и писать в него по необходимости.
  Следить за Ctrl-C, чтобы не потерять данные.

* Перед завершением работы сервера администратор может указать сообщение,
  которое отобразится у всех клиентов. Т.е., на терминале, с которого запущен
  сервер, администратор не просто нажимает Ctrl-C, а дает команду:

    /shutdown <объяснение>

* Специализированная программа-клиент для чата.

  Все возможности должны быть доступны и с помощью обычного
  telnet-клиента. Однако, отдельный клиент дает свои преимущества. Можно
  реализовать следующие возможности:

    --  одновременное присутствие на нескольких каналах
       (при желании  каждый канал можно релализовать на отдельном сервере)
    --  одновременное ведение нескольких приватных бесед
       (беседа как последовательность приватных сообщений,
        начинается  первым сообщением)
    --  отдельное окно для набора своего сообщения, не прерываемого потоком
        с канала 
    --  отдельное окно для списка пользователей на канале

  Для реализации оконного клиента можно воспользоваться библиотекой ncurses,
  в машинном зале она установлена.
