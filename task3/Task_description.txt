 
Придумать иерархию классов на любую тему с абстрактным классом в основе.
Чистую виртуальную функцию нужно выбрать такую, чтобы ее невозможно было реализовать, либо чтобы она делала какое-то действие, требующее завершения  в наследниках.
Например, абстракция "геометрическая фигура", виртуальный метод  -- площадь. Для абстрактной фигуры формулы площади нет, но для классов-наследников, таких как треугольник, квадрат и т.п. метод вычисления площади замещается на свою функцию вычисления площади соответственно треугольника, квадрата и т.п.
Абстракция "геометрическая фигура с фиксированным вырезом" может иметь реализацию чистой виртуальной функции, возвращающую площадь выреза, которую нужно вычесть из общей площади фигуры.
В функции main() показать обработку разнородных объектов в цикле, например вычисление суммарной площади всех созданных в программе геометрических фигур путем вызова соответствующего метода через указатель на базовый класс. 
Использование protected-областей должно быть обоснованным.
В придуманной иерархии выделение чистой виртуальной функции должно быть осмысленно (т.е. такая функция действительно совершенно по-разному реализуется в наследниках и ее либо невозможно реализовать в базовом классе, либо она делает какое-то базовое действие, которое обязательно должно доделываться по-разному  в наследных классах). 
Иначе многие пишут абстрактный класс Студент с чистой вирт. ф-ей, печатающей имя, и двух наследников - класс Вася и класс Петя. Это не годится.
